GitHub Work Flow
# Step 1: Create and switch to a feature branch
git checkout -b feature/new-feature

# Step 2: Stage and commit your work
git add .
git commit -m "Your commit message"

# Step 3: Switch back to main
git checkout main

# Step 4: Merge the feature branch into main
git merge feature/new-feature

# Step 5: Push changes to remote
git push origin main

# Step 6: Delete the feature branch (optional)
git branch -d feature/new-feature




const App = () => {
    const [counter, setCounter] = useState(0)
    
    // This is called as a side effect to a component rendering...so maybe like if the header component is rendered, fetch data from an API.
    useEffect(() => {
        console.log("Rendered first time.")
        // If you use a variable in the function and there's a dependency array, you should put the variable in the dependency array.
        const intervalID = setInterval(() => {
            setCounter(counter+1)
        }, 1000)

        // allows us to clean up the effect right before it rerenders the component
        return () => {
            clearInterval(intervalID)
        }
    }, [])

    return (
        <div className="container">
            <Header message="League Standings"/>
            <button onClick={() => {
                setCounter(counter + 1);
            }}>
                {counter}
            </button>
        </div>
    )
};
